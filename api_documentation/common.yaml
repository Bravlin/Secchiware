components:
  schemas:
    HTTPError:
      type: object
      properties:
        error:
          type: string
      required:
        - error
      example:
        error: Details of the error
    TestsPackageInfo:
      type: object
      properties:
        name:
          type: string
        subpackages:
          type: array
          items:
            $ref: '#/components/schemas/TestsPackageInfo'
          uniqueItems: true
        modules:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              test_sets:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    tests:
                      type: array
                      items:
                        type: string
                      uniqueItems: true
                  required:
                    - name
                uniqueItems: true
            required:
              - name
          uniqueItems: true
      required:
        - name
      example:
        name: foo_package
        modules:
          - name: foo_module
            test_sets:
              name: FooSet
              tests: ['foo', 'bar']
        subpackages:
          - name: foo_subpackage
            modules:
            - name: foo_submodule
              test_sets:
                name: FooSubSet
                tests: ['subfoo', 'sub_bar']
    TestReport:
      type: object
      properties:
        test_name:
          type: string
        test_description:
          type: string
        result_code:
          type: integer
        additional_info:
          type: object
          additionalProperties: true
        timestamp_start:
          type: string
          format: date-time
        timestamp_end:
          type: string
          format: date-time
      required:
        - test_name
        - test_description
        - result_code
        - timestamp_start
        - timestamp_end
      example:
        test_name: foo
        test_description: bar
        result_code: 0
        timestamp_start: 2020-04-02T16:20:06.079646Z
        timestamp_end: 2020-04-02T16:20:06.079849Z
        additional_info:
          - some_key: value
  securitySchemes:
    SecchiwareAuth:
      type: http
      scheme: secchiware-hmac-256
      description: > 
        Format: SECCHIWARE-HMAC-256 keyId={keyId},[headers={headers}],signature={signature}
        Parameters:
          keyId: an opaque string identifier that helps the server find the necessary credentials to validate the signature.
          headers: an arbitrarily ordered list of the names in lowercase of the headers whose values weere used to generate the signature, separated by semicolons (';').
          signature: a base 64 encoded string of the HMAC-SHA256 digest generated with the necessary credentials following the algorithm explained next.
        Algorithm:
          1- Create an empty string.
          2- Append the method of the request in lowercase followed by a newline character ('\n').
          3- Append the canonical URI (path from host, without query string) of the request followed by a newline character ('\n').
          4- If there is a query string, append it URL-encoded (space=%20) followed by a newline character ('\n').
          5- For every header specified, append the following expression: "{header_name}: {header_value}\n",
            where header_name is the key of the header in lowercase and header_value is its corresponding value.
            For the last header the trailing newline character MUST be omitted.
          6- Calculate the HMAC-SHA256 digest of the generated string and base 64 encode it to obtain the signature.