openapi: '3.0.2'

info:
  title: Secchiware Node API
  version: '1.0'
  description: RESTful API expected by a Secchiware Command and Control Server to communicate with a node executing in an analysis environment.

servers:
  - url: '{protocol}://{ip}:{port}'
    variables:
      protocol:
        enum:
          - http
          - https
        default: http
      ip:
        default: '127.0.0.1'
        description: IP configured for the application
      port:
        default: '4900'
        description: Port configured for the application

components:
  schemas:
    HTTPError:
      $ref: 'common.yaml#/components/schemas/HTTPError'
    TestsPackageInfo:
      $ref: 'common.yaml#/components/schemas/TestsPackageInfo'
    TestReport:
      $ref: 'common.yaml#/components/schemas/TestReport'
  securitySchemes:
    SecchiwareAuth:
      $ref: 'common.yaml#/components/securitySchemes/SecchiwareAuth'
  responses:
    401Unauthorized:
      description: Authorization failure
      headers:
        WWW-Authenticate:
          schema:
            type: string
          description: Provides information about the security policy domain associated to the failed request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'

paths:
  /report:
    get:
      summary: Executes tests installed in the node and returns the corresponding report.
      description: >
        If packages, modules or test_sets parameters are given, only the corresponding tests contained within them are executed.
        If there is no parameter, all tests installed in the node are executed.
      parameters:
        - in: query
          name: packages
          schema: 
            type: string
          description: The canonical names of the packages to be executed entirely separated by commas.
          style: form
          explode: false
          allowReserved: true
          examples:
            topPackage:
              value: some_package
              summary: A top level package
            subpackage:
              value: some_package.subpackage
              summary: A child package
            list:
              value: some_package,other_package
              summary: Comma separated packages
        - in: query
          name: modules
          schema: 
            type: string
          description: The canonical names of the modules to be executed entirely separated by commas.
          style: form
          explode: false
          allowReserved: true
          examples:
            simpleCase:
              value: some_package.some_module
              summary: A module contained in a package
            moduleInSubpackage:
              value: some_package.subpackage.a_module
              summary: A module contained in a subpackage
            list:
              value: some_package.some_module,some_package.other_module,other_package.a_module
              summary: Comma separated modules
        - in: query
          name: test_sets
          schema: 
            type: string
          description: The canonical names of the test sets to be executed separated by commas.
          style: form
          explode: false
          allowReserved: true
          examples:
            simpleCase:
              value: some_package.some_module.SomeTestSet
              summary: A test set contained in a module
            moduleInSubpackage:
              value: some_package.subpackage.a_module.ATestSet
              summary: A test set from a module in a subpackage
            list:
              value: some_package.some_module.SomeTestSet,other_package.subpackage.a_module.OtherTestSet
              summary: Comma separated test sets
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TestReport'
                uniqueItems: true
        '400':
          description: Invalid query parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
  /test_sets:
    get:
      summary: Gets all installed root packages in the node.
      description: Returns a list of recursive informative representations of all installed packages.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TestsPackageInfo'
                uniqueItems: true
    patch:
      summary: Uploads new packages or updates existing ones.
      description: Endpoint to upload packages from a compressed file.
      parameters:
        - in: header
          name: Digest
          description: sha256 hash of the request's body
          schema:
            type: string
          example: sha-256=U3dhZ2dlciByb2Nrcw==
          required: true
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                packages:
                  type: string
                  format: binary
                  description: File in tar.gz format
              required:
                - packages
      security:
        - SecchiwareAuth: [C2]
      responses:
        '204':
          description: File correctly uncompressed and packages added or updated accordingly
        '400':
          description: Invalid request's content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '415':
          description: Invalid request's content type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
  /test_sets/{package}:
    delete:
      summary: Deletes a package
      description: Removes the given root package (including all its content) from the node.
      parameters:
      - in: path
        name: package
        required: true
        schema:
          type: string
        description: The root package name.
        example: a_package
      security:
        - SecchiwareAuth: [C2]
      responses:
        '204':
          description: Package deleted successfully
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '404':
          description: Package not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
