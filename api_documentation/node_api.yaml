openapi: '3.0.2'

info:
  title: Secchiware Node API
  version: '1.0'
  description: RESTful API expected by a Secchiware Command and Control Server to communicate with a node executing in an analysis environment.

servers:
  - url: '{protocol}://{ip}:{port}'
    variables:
      protocol:
        enum:
          - http
          - https
        default: http
      ip:
        default: '127.0.0.1'
        description: IP configured for the application
      port:
        default: '4900'
        description: Port configured for the application

components:
  schemas:
    HTTPError:
      type: object
      properties:
        error:
          type: string
      required:
        - error
    TestsPackageInfo:
      type: object
      properties:
        name:
          type: string
        subpackages:
          type: array
          items:
            $ref: '#/components/schemas/TestsPackageInfo'
          uniqueItems: true
        modules:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              test_sets:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    tests:
                      type: array
                      items:
                        type: string
                      uniqueItems: true
                  required:
                    - name
                uniqueItems: true
            required:
              - name
          uniqueItems: true
      required:
        - name
    TestReport:
      type: object
      properties:
        test_name:
          type: string
        test_description:
          type: string
        result_code:
          type: integer
        additional_info:
          type: object
          additionalProperties: true
      required:
        - test_name
        - test_description
        - result_code

paths:
  /report:
    get:
      summary: Execute tests installed in the node and returns the corresponding report.
      description: >
        If packages, modules or test_sets parameters are given, only the corresponding tests contained within them are executed.
        If there is no parameter, all tests installed in the node are executed.
      parameters:
        - in: query
          name: packages
          schema: 
            type: string
          description: The canonical names of the packages to be executed entirely separated by commas.
          style: form
          explode: false
          allowReserved: true
        - in: query
          name: modules
          schema: 
            type: string
          description: The canonical names of the modules to be executed entirely separated by commas.
          style: form
          explode: false
          allowReserved: true
        - in: query
          name: test_sets
          schema: 
            type: string
          description: The canonical names of the test sets to be executed separated by commas.
          style: form
          explode: false
          allowReserved: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TestReport'
                uniqueItems: true
                example:
                  - test_name: foo
                    test_description: bar
                    result_code: 0
                    additional_info:
                      - some_key: value
        '400':
          description: Invalid query parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
  /test_sets:
    get:
      summary: Get all installed root packages in the node.
      description: Returns a list of recursive informative representations of all installed packages.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TestsPackageInfo'
                uniqueItems: true
                example:
                  - name: foo_package
                    modules:
                      - name: foo_module
                        test_sets:
                          name: FooSet
                          tests: ['foo', 'bar']
                    subpackages:
                      - name: foo_subpackage
                        modules:
                        - name: foo_submodule
                          test_sets:
                            name: FooSubSet
                            tests: ['subfoo', 'sub_bar']
    patch:
      summary: Upload new packages or update existing ones.
      description: Endpoint to upload packages from a compressed file.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                packages:
                  type: string
                  format: binary
                  description: File in tar.gz format
              required:
                - packages
      responses:
        '204':
          description: File correctly uncompressed and packages added or updated accordingly
        '400':
          description: Invalid request's content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '415':
          description: Invalid request's content type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
  /test_sets/{package}:
    delete:
      summary: Deletes a package
      description: Removes the given root package (including all its content) from the node.
      parameters:
      - in: path
        name: package
        required: true
        schema:
          type: string
        description: The root package name.
      responses:
        '204':
          description: Package deleted successfully
        '404':
          description: Package not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
